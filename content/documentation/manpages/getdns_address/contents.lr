title: getdns_address.3
---
body:


<h1 align="center">getdns_address</h1>

<a href="#NAME">NAME</a><br>
<a href="#LIBRARY">LIBRARY</a><br>
<a href="#SYNOPSIS">SYNOPSIS</a><br>
<a href="#DESCRIPTION">DESCRIPTION</a><br>
<a href="#RETURN VALUES">RETURN VALUES</a><br>
<a href="#EXAMPLES">EXAMPLES</a><br>
<a href="#FILES">FILES</a><br>
<a href="#SEE ALSO">SEE ALSO</a><br>

<hr>


<h2>NAME
<a name="NAME"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em"><b>getdns_address,
getdns_address_sync</b> -- get ip address(es) for a name</p>

<h2>LIBRARY
<a name="LIBRARY"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">DNS Resolver
library (libgetdns, -lgetdns)</p>

<h2>SYNOPSIS
<a name="SYNOPSIS"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">#include
&lt;getdns.h&gt;</p>


<p style="margin-left:11%; margin-top: 1em">getdns_return_t
<b><br>
getdns_address</b> (getdns_context *context,</p>

<p style="margin-left:15%;">const char *name, <br>
getdns_dict *extensions, <br>
void *userarg, <br>
getdns_transaction_t *transaction_id, <br>
getdns_callback_t callbackfn)</p>


<p style="margin-left:11%; margin-top: 1em">getdns_return_t
<b><br>
getdns_address_sync</b> (getdns_context *context,</p>

<p style="margin-left:15%;">const char *name, <br>
getdns_dict *extensions, <br>
getdns_dict **response)</p>

<h2>DESCRIPTION
<a name="DESCRIPTION"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">The
getdns_address(3) and getdns_address_sync functions provide
public entry points into the getdns API library to retrieve
the address given a host name. They always returns both IPv4
and IPv6 addresses. This function will use all of the
namespaces from the context (to better emulate getaddrinfo
(3)).</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="11%">


<p style="margin-top: 1em"><i>context</i></p></td>
<td width="3%"></td>
<td width="75%">


<p style="margin-top: 1em">A pointer to the previously
created DNS context that is to be</p></td></tr>
</table>

<p style="margin-left:11%;">used with this DNS request. see
getdns_context (3)</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="6%">


<p style="margin-top: 1em"><i>name</i></p></td>
<td width="1%"></td>
<td width="82%">


<p style="margin-top: 1em">the host name to resolve to an
address (note that an IP address is</p></td></tr>
</table>

<p style="margin-left:11%;">considered invalid)</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="15%">


<p style="margin-top: 1em"><i>extensions</i></p></td>
<td width="3%"></td>
<td width="71%">


<p style="margin-top: 1em">extensions for this request,
NULL if no extensions, see</p></td></tr>
</table>

<p style="margin-left:11%;">libgetdns (3) for a detailed
description of extensions</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="11%">


<p style="margin-top: 1em"><i>userarg</i></p></td>
<td width="1%"></td>
<td width="77%">


<p style="margin-top: 1em">returned to the callback
function untouched, can be NULL</p></td></tr>
</table>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">


<p style="margin-top: 1em"><i>transaction_id</i></p><td width="15%"></td>
<td width="85%">


<p style="margin-top: 1em">populated by the API and used to
identify the callback (for example to
getdns_cancel_callback), can be NULL, set to 0 if the
function fails</p></td></tr>
</table>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">


<p style="margin-top: 1em"><i>callbackfn</i></p><td width="15%"></td>
<td width="85%">


<p style="margin-top: 1em">non-NULL pointer to a callback
function defined by the application, typically used to
process the response. Only the asynchronous signature
accepts a callback function, the synchronous signature does
not include a callback. See libgetdns (3) for a more
detailed discussion of callback functions.</p></td></tr>
</table>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">


<p style="margin-top: 1em"><i>response</i></p><td width="15%"></td>
<td width="85%">


<p style="margin-top: 1em">A getdns_dict type is returned
in response and always contains at least three names:
replies_full (a list containing the DNS response as binary
data), replies_tree (a list containing the parsed DNS
response data) and status (an int). The storage associated
with this must be freed by a call to
getdns_free_sync_request_memory (3).</p></td></tr>
</table>

<h2>RETURN VALUES
<a name="RETURN VALUES"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">Upon successful
completion the functions return <b>GETDNS_RETURN_GOOD</b> ,
otherwise the following error values are returned:</p>


<p style="margin-left:11%; margin-top: 1em"><b>GETDNS_RETURN_BAD_CONTEXT</b>
if the context pointer is invalid or the context has
internal deficiencies</p>


<p style="margin-left:11%; margin-top: 1em"><b>GETDNS_RETURN_BAD_DOMAIN_NAME</b>
if the domain name passed to the function is invalid</p>


<p style="margin-left:11%; margin-top: 1em"><b>GETDNS_RETURN_EXTENSION_MISFORMAT</b>
if the data type specified in one or more of the extensions
does not match the specifications</p>


<p style="margin-left:11%; margin-top: 1em"><b>GETDNS_RETURN_GENERIC_ERROR</b>
if some problem was encountered in the function not
addressed by one of the more specific return codes</p>


<p style="margin-left:11%; margin-top: 1em"><b>GETDNS_RETURN_INVALID
PARAMETER</b> if one or more parameters has an invalid
value</p>


<p style="margin-left:11%; margin-top: 1em"><b>GETDNS_RETURN_MEMORY_ERROR</b>
if unable to allocate the memory required</p>


<p style="margin-left:11%; margin-top: 1em"><b>GETDNS_RETURN_NO_SUCH_EXTENSION</b>
if one or more of the strings specified in the extensions
are not valid</p>

<p style="margin-left:11%; margin-top: 1em">The values of
status included in the response parameter are:</p>


<p style="margin-left:11%; margin-top: 1em"><b>GETDNS_RESPSTATUS_GOOD</b>
if at least one response was returned</p>


<p style="margin-left:11%; margin-top: 1em"><b>GETDNS_RESPSTATUS_NO_NAME</b>
if queries for the name yielded all negative responses</p>


<p style="margin-left:11%; margin-top: 1em"><b>GETDNS_RESPSTATUS_ALL_TIMEOUT</b>
if all queries for the name timed out</p>


<p style="margin-left:11%; margin-top: 1em"><b>GETDNS_RESPSTATUS_NO_SECURE_ANSWERS</b>
if only secure replies accepted (per context) and at least
one response was received but no DNS responses were secure
through DNSSEC</p>

<p style="margin-left:11%; margin-top: 1em">For a more
detailed explanation of the response object see
<i>libgetdns</i> (3)</p>

<h2>EXAMPLES
<a name="EXAMPLES"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">TBD</p>

<h2>FILES
<a name="FILES"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">/etc/hosts <br>
/etc/resolv.conf</p>

<h2>SEE ALSO
<a name="SEE ALSO"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em"><b>libgetdns</b>(3),
<b>getdns_context</b>(3),
<b>getdns_free_sync_request_memory</b>(3),
<b>getdns_general</b>(3), <b>getdns_general_sync</b>(3),
<b>getdns_hostname</b>(3), <b>getdns_hostname_sync</b>(3),
<b>getdns_service</b>(3), <b>getdns_service_sync</b>(3)</p>
<hr>

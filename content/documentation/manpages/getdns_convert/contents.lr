title: getdns_convert.3
---
body:


<h1 align="center">getdns_convert</h1>

<a href="#NAME">NAME</a><br>
<a href="#LIBRARY">LIBRARY</a><br>
<a href="#SYNOPSIS">SYNOPSIS</a><br>
<a href="#DESCRIPTION">DESCRIPTION</a><br>
<a href="#RETURN VALUES">RETURN VALUES</a><br>
<a href="#EXAMPLES">EXAMPLES</a><br>
<a href="#SEE ALSO">SEE ALSO</a><br>

<hr>


<h2>NAME
<a name="NAME"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em"><b>getdns_convert,
getdns_convert_dns_name_to_fqdn,
getdns_convert_fqdn_to_dns_name</b> -- convert dname between
presentation- and wire-format</p>

<h2>LIBRARY
<a name="LIBRARY"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">DNS Resolver
library (libgetdns, -lgetdns)</p>

<h2>SYNOPSIS
<a name="SYNOPSIS"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">#include
&lt;getdns.h&gt;</p>


<p style="margin-left:11%; margin-top: 1em">getdns_return_t
<b><br>
getdns_convert_dns_name_to_fqdn</b> (const getdns_bindata
*dns_name_wire_fmt,</p>

<p style="margin-left:15%;">char **fqdn_as_string)</p>


<p style="margin-left:11%; margin-top: 1em">getdns_return_t
<b><br>
getdns_convert_fqdn_to_dns_name</b> (char
*fqdn_as_string,</p>

<p style="margin-left:15%;">const getdns_bindata
**dns_name_wire_fmt)</p>

<h2>DESCRIPTION
<a name="DESCRIPTION"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">Names in DNS
fields are stored in a fashion very different from the
normal presentation format normally used in applications.
The DNS format is described in the first paragraph in
Section 3.1 of RFC 1035; the presentation format here is a
null-terminated string with interior dots. These helper
functions only work with names in the DNS format that are
not compressed. They are useful for converting domain names
in the replies_tree to and from the FQDN presentation
format.</p>


<p style="margin-left:11%; margin-top: 1em">getdns_convert_dns_name_to_fqdn()
converts a domain name in DNS format to the presentation
format. For example, the hex sequence 03 77 77 77 07 65 78
61 6d 70 6c 65 03 63 6f 6d 00 would be converted to
&quot;www.example.com&quot;.
getdns_convert_fqdn_to_dns_name() does the reverse: it
converts a null-terminated string in FQDN format to bytes in
DNS format.</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="26%">


<p style="margin-top: 1em"><i>dns_name_wire_fmt</i></p></td>
<td width="3%"></td>
<td width="60%">


<p style="margin-top: 1em">The non-compressed DNS wire
format name (per RFC</p></td></tr>
</table>

<p style="margin-left:11%;">1035) in a bindata structure
that will be converted to/from an fqdn. In
getdns_convert_fqdn_to_dns_name storage is allocated using
the system allocator (malloc) and must be freed by the
caller.</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="21%">


<p style="margin-top: 1em"><i>fqdn_as_string</i></p></td>
<td width="3%"></td>
<td width="65%">


<p style="margin-top: 1em">a null terminated string to be
converted to/from</p></td></tr>
</table>

<p style="margin-left:11%;">non-compressed DNS wire format
name (per RFC 1035). In getdns_convert_dns_name_to_fqdn
storage is allocated using the system allocator (malloc) and
must be freed by the caller.</p>

<h2>RETURN VALUES
<a name="RETURN VALUES"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">Upon successful
completion the function returns
<b>GETDNS_RETURN_GOOD</b></p>

<h2>EXAMPLES
<a name="EXAMPLES"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">TBD</p>

<h2>SEE ALSO
<a name="SEE ALSO"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em"><b>libgetdns</b>(3)</p>
<hr>

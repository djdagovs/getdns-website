title: getdns_context.3
---
body:


<h1 align="center">getdns_context</h1>

<a href="#NAME">NAME</a><br>
<a href="#LIBRARY">LIBRARY</a><br>
<a href="#SYNOPSIS">SYNOPSIS</a><br>
<a href="#DESCRIPTION">DESCRIPTION</a><br>
<a href="#DESCRIPTION (LONG)">DESCRIPTION (LONG)</a><br>
<a href="#RETURN VALUES">RETURN VALUES</a><br>
<a href="#EXAMPLES">EXAMPLES</a><br>
<a href="#FILES">FILES</a><br>
<a href="#SEE ALSO">SEE ALSO</a><br>

<hr>


<h2>NAME
<a name="NAME"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em"><b>getdns_context,
getdns_context_create,
getdns_context_create_with_memory_functions,
getdns_context_create_with_extended_memory_functions,
getdns_context_destroy,
getdns_context_get_api_information</b> -- getdns context
create and destroy routines</p>

<h2>LIBRARY
<a name="LIBRARY"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">DNS Resolver
library (libgetdns, -lgetdns)</p>

<h2>SYNOPSIS
<a name="SYNOPSIS"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">#include
&lt;getdns.h&gt;</p>


<p style="margin-left:11%; margin-top: 1em">getdns_return_t
<b><br>
getdns_context_create</b> (getdns_context ** context,</p>

<p style="margin-left:15%;">int set_from_os)</p>


<p style="margin-left:11%; margin-top: 1em">getdns_return_t
<b><br>
getdns_context_create_with_memory_functions</b>
(getdns_context ** context,</p>

<p style="margin-left:15%;">int set_from_os, <br>
void *(*malloc) (size_t), <br>
void *(*realloc) (void *, size_t), <br>
void (*free) (void *))</p>


<p style="margin-left:11%; margin-top: 1em">getdns_return_t
<b><br>
getdns_context_create_with_extended_memory_functions</b>
(getdns_context **context,</p>

<p style="margin-left:15%;">int set_from_os, <br>
void *userarg, <br>
void *(*malloc) (void *userarg, size_t), <br>
void *(*realloc) (void *userarg, void *, size_t), <br>
void (*free) (void *userarg, void *))</p>

<p style="margin-left:11%; margin-top: 1em">void <b><br>
getdns_context_destroy</b> (getdns_context *context)</p>

<p style="margin-left:11%; margin-top: 1em">getdns_dict *
<b><br>
getdns_context_get_api_information</b> (getdns_context
*context)</p>

<h2>DESCRIPTION
<a name="DESCRIPTION"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">Calls to getdns
functions require a DNS context, which is a group of API
settings that affect how DNS calls are made. For most
applications, a default context is sufficient.</p>

<p style="margin-left:11%; margin-top: 1em">To create a new
DNS context, use the function:</p>

<p style="margin-left:15%;">getdns_return_t
<b>getdns_context_create</b> (getdns_context_t *context,
bool set_from_os)</p>

<p style="margin-left:11%; margin-top: 1em">The call to
getdns_context_create immediately returns a context that can
be used with other API calls; that context contains the
API&rsquo;s default values. Most applications will want
set_from_os set to true.</p>

<p style="margin-left:11%; margin-top: 1em">To clean up the
context, including cleaning up all outstanding transactions
that were called using this context, use the function:</p>

<p style="margin-left:15%;">void
<b>getdns_context_destroy</b> (getdns_context_t context)</p>

<p style="margin-left:11%; margin-top: 1em">When
getdns_context_destroy() returns, the application knows that
all outstanding transactions associated with this context
will have been called; callbacks that had not been called
before getdns_context_destroy() was called will be called
with a callback_type of GETDNS_CALLBACK_CANCEL.
getdns_context_destroy() returns after all of the needed
cleanup is done and callbacks are made.</p>

<p style="margin-left:11%; margin-top: 1em">If you are
using getdns in a multi-threaded manner, you are then of
course using the underlying OpenSSL library multi-threaded
and the version of that library in use might have a
requirements on this issue. You may need to provide one or
two functions to allow it to function properly. For example
before you call getdns_context_create() you may need to use
the openssl functions CRYPTO_set_id_callback and
CRYPTO_set_locking_callback to set up asynchronous operation
(the application calls these functions once for
initialisation). Openssl 1.0.0 or later uses the
CRYPTO_THREADID_set_callback function.</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="11%">


<p style="margin-top: 1em"><i>context</i></p></td>
<td width="3%"></td>
<td width="75%">


<p style="margin-top: 1em">Used to return the pointer to an
opaque structure. The caller</p></td></tr>
</table>

<p style="margin-left:11%;">passes the address of a pointer
(decl: getdns_context *context; passed as &amp;context)
which will be populated as a result of returning from the
function. The result is a newly allocated and initialized
context (if there are no errors). In the
getdns_destroy_context function this is the context whose
associated memory will be released.</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="17%">


<p style="margin-top: 1em"><i>set_from_os</i></p></td>
<td width="1%"></td>
<td width="71%">


<p style="margin-top: 1em">If set_from_os is 0 then the
caller must provide forwarding</p></td></tr>
</table>

<p style="margin-left:11%;">name servers if running in stub
mode. If set_from_os is 1 then the system files are used to
initialize the context. /etc/resolv.conf is used to populate
forwarders when running as a stub resolver (only
&quot;nameserver&quot; lines are recognized). If set_from_os
is 1 /etc/hosts entries are preferred before resorting to a
DNS query. Errors in the system files will not prevent the
context form being constructed.</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="11%">


<p style="margin-top: 1em"><i>userarg</i></p></td>
<td width="1%"></td>
<td width="77%">


<p style="margin-top: 1em">In the extended use case this
argument is passed unchanged to</p></td></tr>
</table>

<p style="margin-left:11%;">each of the memory management
functions each time they are called.</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="9%">


<p style="margin-top: 1em"><i>malloc</i></p></td>
<td width="3%"></td>
<td width="77%">


<p style="margin-top: 1em">The function that will be used
for creating response dicts (and</p></td></tr>
</table>

<p style="margin-left:11%;">the members within the response
dicts). By default the system malloc is used.</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="11%">


<p style="margin-top: 1em"><i>realloc</i></p></td>
<td width="1%"></td>
<td width="77%">


<p style="margin-top: 1em">The function that will be used
for creating response dicts (and</p></td></tr>
</table>

<p style="margin-left:11%;">the members within the response
dicts). By default the system realloc is used.</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="6%">


<p style="margin-top: 1em"><i>free</i></p></td>
<td width="3%"></td>
<td width="80%">


<p style="margin-top: 1em">The function that will be used
for releasing storage for response</p></td></tr>
</table>

<p style="margin-left:11%;">dicts (and the members within
the response dicts). By default the system free is used.</p>

<h2>DESCRIPTION (LONG)
<a name="DESCRIPTION (LONG)"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">Many calls in
the DNS API require a DNS context. A DNS context contains
the information that the API needs in order to process DNS
calls, such as the locations of upstream DNS servers, DNSSEC
trust anchors, and so on. The internal structure of the DNS
context is opaque, and might be different on each OS. When a
context is passed to any function, it must be an allocated
context; the context must not be NULL.</p>

<p style="margin-left:11%; margin-top: 1em">A typical
application using this API doesn&rsquo;t need to know
anything about contexts. Basically, the application creates
a default context, uses it in the functions that require a
context, and then deallocates it when done. Context
manipulation is available for more DNS-aware programs, but
is unlikely to be of interest to applications that just want
the results of lookups for A, AAAA, SRV, and PTR
records.</p>

<p style="margin-left:11%; margin-top: 1em">It is expected
that contexts in implementations of the API will not
necessarily be thread-safe, but they will not be
thread-hostile. A context should not be used by multiple
threads: create a new context for use on a different thread.
It is just fine for an application to have many contexts,
and some DNS-heavy applications will certainly want to have
many even if the application uses a single thread.</p>

<p style="margin-left:11%; margin-top: 1em">When the
context is used in the API for the first time and
set_from_os is 1, the API starts replacing some of the
values with values from the OS, such as those that would be
found in res_query(3), /etc/resolv.conf, and so on, then
proceeds with the new function. Some advanced users will not
want the API to change the values to the OS&rsquo;s
defaults; if set_from_os is 0, the API will not do any
updates to the initial values based on changes in the OS.
For example, this might be useful if the API is acting as a
stub resolver that is using a specific upstream recursive
resolver chosen by the application, not the one that might
come back from DHCP.</p>

<h2>RETURN VALUES
<a name="RETURN VALUES"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">Upon successful
completion each of these functions return
<b>GETDNS_RETURN_GOOD</b> , otherwise the following error
values are returned:</p>


<p style="margin-left:11%; margin-top: 1em"><b>GETDNS_RETURN_GENERIC_ERROR</b>
memory allocation failed or some other untoward thing
happened while initializing the context</p>


<p style="margin-left:11%; margin-top: 1em"><b>GETDNS_RETURN_BAD_CONTEXT</b>
if the context pointer is invalid
(getdns_context_destroy)</p>

<p style="margin-left:11%; margin-top: 1em">The getdns_dict
returned by getdns_context_get_api_information must be
destroyed by the called and includes the following
name/value pairs: <br>
version_string</p>

<p style="margin-left:22%;">a bindata containing a
printable string of the version of the DNS API implemented
by this library</p>

<p style="margin-left:11%;">implementation_string</p>

<p style="margin-left:22%;">a bindata containing a
printable string set by the implementation</p>

<p style="margin-left:11%;">resolution_type</p>

<p style="margin-left:22%;">an int equal to
GETDNS_RESOLUTION_RECURSING or GETDNS_RESOLUTION_STUB</p>

<p style="margin-left:11%;">all_context</p>

<p style="margin-left:22%;">a getdns_dict with names for
all the types of context, feed it to
getdns_pretty_print_dict (3) for something easily
readable</p>

<h2>EXAMPLES
<a name="EXAMPLES"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">TBD</p>

<h2>FILES
<a name="FILES"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">/etc/hosts <br>
/etc/resolv.conf</p>

<h2>SEE ALSO
<a name="SEE ALSO"></a>
</h2>



<p style="margin-left:11%; margin-top: 1em"><b>libgetdns</b>(3),
<b>getdns_address</b>(3), <b>getdns_address_sync</b>(3),
<b>getdns_context_set</b>(3),
<b>getdns_context_set_context_update_callback</b>(3),
<b>getdns_general</b>(3), <b>getdns_general_sync</b>(3),
<b>getdns_hostname</b>(3), <b>getdns_hostname_sync</b>(3),
<b>getdns_service</b>(3), <b>getdns_service_sync</b>(3).</p>
<hr>
